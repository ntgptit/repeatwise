openapi: 3.1.0
info:
  title: RepeatWise API - MVP
  description: |
    API cho hệ thống học tập flashcard với Spaced Repetition System (SRS).

    ## Tính năng chính
    - Quản lý folders phân cấp (hierarchical organization)
    - Quản lý decks và flashcards
    - SRS algorithm với 7-box system
    - Import/Export CSV/Excel
    - Review modes: SRS, Cram, Random
    - Statistics và analytics

    ## Authentication
    JWT với Refresh Token (MVP):
    - Access token: 15 minutes (Bearer)
    - Refresh token: 7 days (HTTP-only cookie)
    - Token rotation on refresh

    ## Versioning
    - Current Version: v1 (implicit, no /v1 prefix in MVP)
    - Base URL: `/api`

    ## Rate Limiting
    - Global: 100 requests/minute/user
    - Login: 5 attempts/minute/IP
    - Copy operations: 10 requests/hour

  version: 1.0.0-mvp
  contact:
    name: RepeatWise Team
    email: support@repeatwise.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.repeatwise.com/api
    description: Production server
  - url: https://staging-api.repeatwise.com/api
    description: Staging server
  - url: http://localhost:8080/api
    description: Local development server

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Xác thực với JWT + refresh token
  - name: Users
    description: Quản lý profile user
  - name: Folders
    description: Quản lý folder hierarchy (max 10 levels)
  - name: Decks
    description: Quản lý decks trong folders
  - name: Cards
    description: Quản lý flashcards, import/export
  - name: SRS Settings
    description: Cấu hình Spaced Repetition System
  - name: Review
    description: Review session với SRS algorithm
  - name: Statistics
    description: Thống kê học tập và progress

paths:
  # =============================================================================
  # AUTHENTICATION
  # =============================================================================

  /auth/register:
    post:
      tags: [Authentication]
      summary: Đăng ký tài khoản mới
      description: Tạo tài khoản user mới với email + password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Đăng ký thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Đăng nhập
      description: |
        Xác thực user và trả về:
        - Access token (15 minutes) trong response body
        - Refresh token (7 days) trong HTTP-only cookie
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Đăng nhập thành công
          headers:
            Set-Cookie:
              description: Refresh token (HTTP-only, Secure, SameSite=Strict)
              schema:
                type: string
                example: refresh_token=<token>; HttpOnly; Secure; SameSite=Strict; Max-Age=604800
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Làm mới access token
      description: |
        Sử dụng refresh token (từ cookie) để lấy access token mới.
        Refresh token cũ sẽ bị revoke (one-time use).
      security: []
      responses:
        '200':
          description: Token refreshed thành công
          headers:
            Set-Cookie:
              description: New refresh token (token rotation)
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Đăng xuất
      description: Revoke refresh token (từ cookie)
      responses:
        '204':
          description: Logout thành công
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout-all:
    post:
      tags: [Authentication]
      summary: Đăng xuất tất cả thiết bị
      description: Revoke tất cả refresh tokens của user
      responses:
        '204':
          description: Logout all devices thành công
        '401':
          $ref: '#/components/responses/Unauthorized'

  # =============================================================================
  # USERS
  # =============================================================================

  /users/me:
    get:
      tags: [Users]
      summary: Lấy profile hiện tại
      description: Lấy thông tin profile của user đang đăng nhập
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Users]
      summary: Cập nhật profile
      description: Cập nhật name, timezone, language, theme
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  # =============================================================================
  # FOLDERS
  # =============================================================================

  /folders:
    get:
      tags: [Folders]
      summary: Lấy folder tree
      description: Lấy folder tree của user (có thể limit depth)
      parameters:
        - name: maxDepth
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FolderResponse'

    post:
      tags: [Folders]
      summary: Tạo folder mới
      description: Tạo folder (validate depth ≤ 10)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
      responses:
        '201':
          description: Tạo thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /folders/{folderId}:
    get:
      tags: [Folders]
      summary: Lấy chi tiết folder
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderDetailResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Folders]
      summary: Cập nhật folder (rename)
      parameters:
        - $ref: '#/components/parameters/FolderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequest'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Folders]
      summary: Xóa folder (soft delete)
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        '204':
          description: Xóa thành công
        '404':
          $ref: '#/components/responses/NotFound'

  /folders/{folderId}/move:
    post:
      tags: [Folders]
      summary: Di chuyển folder
      description: Di chuyển folder (validate depth sau move ≤ 10)
      parameters:
        - $ref: '#/components/parameters/FolderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveFolderRequest'
      responses:
        '200':
          description: Di chuyển thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /folders/{folderId}/copy:
    post:
      tags: [Folders]
      summary: Copy folder
      description: |
        Copy folder (async nếu >50 items):
        - ≤50 items: Sync copy (immediate)
        - 51-500 items: Async copy (return job_id)
        - >500 items: Error (too large)
      parameters:
        - $ref: '#/components/parameters/FolderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyFolderRequest'
      responses:
        '200':
          description: Sync copy thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyFolderSyncResponse'
        '202':
          description: Async copy started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyFolderAsyncResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /folders/copy-status/{jobId}:
    get:
      tags: [Folders]
      summary: Kiểm tra trạng thái copy job
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyJobStatusResponse'

  /folders/{folderId}/stats:
    get:
      tags: [Folders]
      summary: Lấy folder statistics (recursive)
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderStatsResponse'

  /folders/{folderId}/breadcrumb:
    get:
      tags: [Folders]
      summary: Lấy breadcrumb path
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreadcrumbItem'

  # =============================================================================
  # DECKS
  # =============================================================================

  /decks:
    get:
      tags: [Decks]
      summary: Lấy danh sách decks
      parameters:
        - name: folderId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckResponse'

    post:
      tags: [Decks]
      summary: Tạo deck mới
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeckRequest'
      responses:
        '201':
          description: Tạo thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckResponse'

  /decks/{deckId}:
    get:
      tags: [Decks]
      summary: Lấy chi tiết deck
      parameters:
        - $ref: '#/components/parameters/DeckId'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDetailResponse'

    put:
      tags: [Decks]
      summary: Cập nhật deck
      parameters:
        - $ref: '#/components/parameters/DeckId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeckRequest'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckResponse'

    delete:
      tags: [Decks]
      summary: Xóa deck
      parameters:
        - $ref: '#/components/parameters/DeckId'
      responses:
        '204':
          description: Xóa thành công

  /decks/{deckId}/move:
    post:
      tags: [Decks]
      summary: Di chuyển deck
      parameters:
        - $ref: '#/components/parameters/DeckId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDeckRequest'
      responses:
        '200':
          description: Di chuyển thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckResponse'

  /decks/{deckId}/copy:
    post:
      tags: [Decks]
      summary: Copy deck
      description: |
        Copy deck (async nếu >1000 cards):
        - ≤1000 cards: Sync
        - 1001-10,000 cards: Async
        - >10,000 cards: Error
      parameters:
        - $ref: '#/components/parameters/DeckId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyDeckRequest'
      responses:
        '200':
          description: Sync copy thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyDeckSyncResponse'
        '202':
          description: Async copy started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyDeckAsyncResponse'

  # =============================================================================
  # CARDS
  # =============================================================================

  /decks/{deckId}/cards:
    get:
      tags: [Cards]
      summary: Lấy danh sách cards
      parameters:
        - $ref: '#/components/parameters/DeckId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsPaginationResponse'

    post:
      tags: [Cards]
      summary: Tạo card mới
      parameters:
        - $ref: '#/components/parameters/DeckId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Tạo thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

  /cards/{cardId}:
    put:
      tags: [Cards]
      summary: Cập nhật card
      parameters:
        - $ref: '#/components/parameters/CardId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

    delete:
      tags: [Cards]
      summary: Xóa card
      parameters:
        - $ref: '#/components/parameters/CardId'
      responses:
        '204':
          description: Xóa thành công

  /decks/{deckId}/cards/import:
    post:
      tags: [Cards]
      summary: Import cards từ CSV/Excel
      parameters:
        - $ref: '#/components/parameters/DeckId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV hoặc Excel file (max 50MB, 10,000 rows)
      responses:
        '200':
          description: Import thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCardsResponse'

  /decks/{deckId}/cards/export:
    get:
      tags: [Cards]
      summary: Export cards to CSV/Excel
      parameters:
        - $ref: '#/components/parameters/DeckId'
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [csv, xlsx]
        - name: filter
          in: query
          schema:
            type: string
            enum: [all, due]
            default: all
      responses:
        '200':
          description: Export thành công
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /cards/template:
    get:
      tags: [Cards]
      summary: Download template file
      parameters:
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [csv, xlsx]
      responses:
        '200':
          description: Template file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  # =============================================================================
  # SRS SETTINGS
  # =============================================================================

  /srs/settings:
    get:
      tags: [SRS Settings]
      summary: Lấy SRS settings
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SrsSettingsResponse'

    put:
      tags: [SRS Settings]
      summary: Cập nhật SRS settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSrsSettingsRequest'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SrsSettingsResponse'

    post:
      tags: [SRS Settings]
      summary: Reset settings về default
      responses:
        '200':
          description: Reset thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SrsSettingsResponse'

  # =============================================================================
  # REVIEW
  # =============================================================================

  /review/due:
    get:
      tags: [Review]
      summary: Lấy due cards
      description: |
        Lấy cards cần review theo mode:
        - SPACED_REPETITION: Cards với due_date ≤ today
        - CRAM: All cards (ignore schedule)
        - RANDOM: Random cards
      parameters:
        - name: mode
          in: query
          required: true
          schema:
            type: string
            enum: [SPACED_REPETITION, CRAM, RANDOM]
        - name: scope
          in: query
          required: true
          schema:
            type: string
            enum: [all, folder, deck]
        - name: scopeId
          in: query
          schema:
            type: string
            format: uuid
          description: Required nếu scope=folder hoặc deck
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 100
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DueCardsResponse'

  /review/submit:
    post:
      tags: [Review]
      summary: Submit card rating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitReviewRequest'
      responses:
        '200':
          description: Submit thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResultResponse'

  /review/undo:
    post:
      tags: [Review]
      summary: Undo last review
      responses:
        '200':
          description: Undo thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndoReviewResponse'

  /review/skip/{cardId}:
    post:
      tags: [Review]
      summary: Skip card (postpone)
      parameters:
        - $ref: '#/components/parameters/CardId'
      responses:
        '200':
          description: Skip thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkipCardResponse'

  # =============================================================================
  # STATISTICS
  # =============================================================================

  /stats/user:
    get:
      tags: [Statistics]
      summary: Lấy user statistics
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsResponse'

  /stats/folder/{folderId}:
    get:
      tags: [Statistics]
      summary: Lấy folder statistics (recursive)
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderStatsResponse'

  /stats/deck/{deckId}:
    get:
      tags: [Statistics]
      summary: Lấy deck statistics
      parameters:
        - $ref: '#/components/parameters/DeckId'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckStatsResponse'

  /stats/box-distribution:
    get:
      tags: [Statistics]
      summary: Lấy box distribution
      parameters:
        - name: scope
          in: query
          required: true
          schema:
            type: string
            enum: [all, folder, deck]
        - name: scopeId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoxDistributionResponse'

# =============================================================================
# COMPONENTS
# =============================================================================

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT access token (15 minutes expiry).
        Format: Authorization: Bearer <token>

  parameters:
    FolderId:
      name: folderId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    DeckId:
      name: deckId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    CardId:
      name: cardId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0

    Size:
      name: size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    BadRequest:
      description: Bad request - Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - Missing or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Conflict - Duplicate or constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # Common schemas
    ErrorResponse:
      type: object
      required: [timestamp, status, error, message, path]
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        traceId:
          type: string

    # Authentication schemas
    RegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 128
        name:
          type: string
          maxLength: 100

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      required: [accessToken, expiresIn]
      properties:
        accessToken:
          type: string
          description: JWT access token
        expiresIn:
          type: integer
          description: Expiry in seconds (900 = 15 minutes)
          example: 900

    RefreshResponse:
      type: object
      required: [accessToken, expiresIn]
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          example: 900

    # User schemas
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        timezone:
          type: string
          example: "Asia/Ho_Chi_Minh"
        language:
          type: string
          enum: [VI, EN]
        theme:
          type: string
          enum: [LIGHT, DARK, SYSTEM]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        timezone:
          type: string
        language:
          type: string
          enum: [VI, EN]
        theme:
          type: string
          enum: [LIGHT, DARK, SYSTEM]

    # Folder schemas
    FolderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
          nullable: true
        depth:
          type: integer
          minimum: 0
          maximum: 10
        path:
          type: string
          example: "/uuid1/uuid2"
        childrenCount:
          type: integer
        deckCount:
          type: integer
        totalCards:
          type: integer
        dueCards:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    FolderDetailResponse:
      allOf:
        - $ref: '#/components/schemas/FolderResponse'
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/FolderResponse'
            decks:
              type: array
              items:
                $ref: '#/components/schemas/DeckResponse'

    CreateFolderRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        parentFolderId:
          type: string
          format: uuid
          nullable: true

    UpdateFolderRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    MoveFolderRequest:
      type: object
      required: [newParentFolderId]
      properties:
        newParentFolderId:
          type: string
          format: uuid
          nullable: true

    CopyFolderRequest:
      type: object
      required: [destinationFolderId, copyDecks]
      properties:
        destinationFolderId:
          type: string
          format: uuid
        copyDecks:
          type: boolean
          default: true

    CopyFolderSyncResponse:
      type: object
      properties:
        newFolderId:
          type: string
          format: uuid
        status:
          type: string
          enum: [COMPLETED]

    CopyFolderAsyncResponse:
      type: object
      properties:
        jobId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PROCESSING]
        message:
          type: string

    CopyJobStatusResponse:
      type: object
      properties:
        jobId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PROCESSING, COMPLETED, FAILED]
        progress:
          type: integer
          minimum: 0
          maximum: 100
        message:
          type: string
        completedAt:
          type: string
          format: date-time
          nullable: true

    FolderStatsResponse:
      type: object
      properties:
        folderId:
          type: string
          format: uuid
        totalCards:
          type: integer
        dueCards:
          type: integer
        newCards:
          type: integer
        matureCards:
          type: integer
        lastComputedAt:
          type: string
          format: date-time

    BreadcrumbItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string

    # Deck schemas
    DeckResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        folderId:
          type: string
          format: uuid
          nullable: true
        cardCount:
          type: integer
        dueCardCount:
          type: integer
        lastStudiedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time

    DeckDetailResponse:
      allOf:
        - $ref: '#/components/schemas/DeckResponse'
        - type: object
          properties:
            stats:
              $ref: '#/components/schemas/DeckStatsResponse'

    CreateDeckRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        folderId:
          type: string
          format: uuid
          nullable: true

    UpdateDeckRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    MoveDeckRequest:
      type: object
      required: [newFolderId]
      properties:
        newFolderId:
          type: string
          format: uuid
          nullable: true

    CopyDeckRequest:
      type: object
      required: [destinationFolderId]
      properties:
        destinationFolderId:
          type: string
          format: uuid

    CopyDeckSyncResponse:
      type: object
      properties:
        newDeckId:
          type: string
          format: uuid
        status:
          type: string
          enum: [COMPLETED]

    CopyDeckAsyncResponse:
      type: object
      properties:
        jobId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PROCESSING]

    # Card schemas
    CardResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        front:
          type: string
        back:
          type: string
        deckId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCardRequest:
      type: object
      required: [front, back]
      properties:
        front:
          type: string
          maxLength: 5000
        back:
          type: string
          maxLength: 5000

    UpdateCardRequest:
      type: object
      properties:
        front:
          type: string
          maxLength: 5000
        back:
          type: string
          maxLength: 5000

    CardsPaginationResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    ImportCardsResponse:
      type: object
      properties:
        successCount:
          type: integer
        errorCount:
          type: integer
        totalRows:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              error:
                type: string

    # SRS Settings schemas
    SrsSettingsResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        totalBoxes:
          type: integer
          enum: [7]
        reviewOrder:
          type: string
          enum: [ASCENDING, DESCENDING, RANDOM]
        notificationEnabled:
          type: boolean
        notificationTime:
          type: string
          format: time
          example: "09:00"
        forgottenCardAction:
          type: string
          enum: [MOVE_TO_BOX_1, MOVE_DOWN_N_BOXES, STAY_IN_BOX]
        moveDownBoxes:
          type: integer
          minimum: 1
          maximum: 3
        newCardsPerDay:
          type: integer
          default: 20
        maxReviewsPerDay:
          type: integer
          default: 200

    UpdateSrsSettingsRequest:
      type: object
      properties:
        reviewOrder:
          type: string
          enum: [ASCENDING, DESCENDING, RANDOM]
        notificationEnabled:
          type: boolean
        notificationTime:
          type: string
          format: time
        forgottenCardAction:
          type: string
          enum: [MOVE_TO_BOX_1, MOVE_DOWN_N_BOXES, STAY_IN_BOX]
        moveDownBoxes:
          type: integer
          minimum: 1
          maximum: 3
        newCardsPerDay:
          type: integer
          minimum: 1
        maxReviewsPerDay:
          type: integer
          minimum: 1

    # Review schemas
    DueCardsResponse:
      type: object
      properties:
        cards:
          type: array
          items:
            type: object
            properties:
              cardId:
                type: string
                format: uuid
              front:
                type: string
              back:
                type: string
              deckName:
                type: string
              currentBox:
                type: integer
                minimum: 1
                maximum: 7
              dueDate:
                type: string
                format: date
              reviewCount:
                type: integer
              lastReviewedAt:
                type: string
                format: date-time
        totalDue:
          type: integer
        returned:
          type: integer

    SubmitReviewRequest:
      type: object
      required: [cardId, rating]
      properties:
        cardId:
          type: string
          format: uuid
        rating:
          type: string
          enum: [AGAIN, HARD, GOOD, EASY]

    ReviewResultResponse:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
        previousBox:
          type: integer
        newBox:
          type: integer
        previousDueDate:
          type: string
          format: date
        newDueDate:
          type: string
          format: date
        nextInterval:
          type: integer

    UndoReviewResponse:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
        restoredBox:
          type: integer
        restoredDueDate:
          type: string
          format: date

    SkipCardResponse:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
        skipped:
          type: boolean
        message:
          type: string

    # Statistics schemas
    UserStatsResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        totalCardsLearned:
          type: integer
        streakDays:
          type: integer
        lastStudyDate:
          type: string
          format: date
        totalStudyTimeMinutes:
          type: integer
        todayCardsReviewed:
          type: integer
        todayNewCards:
          type: integer

    DeckStatsResponse:
      type: object
      properties:
        deckId:
          type: string
          format: uuid
        totalCards:
          type: integer
        dueCards:
          type: integer
        newCards:
          type: integer
        matureCards:
          type: integer
        lastStudiedAt:
          type: string
          format: date-time

    BoxDistributionResponse:
      type: object
      properties:
        scope:
          type: string
          enum: [all, folder, deck]
        scopeId:
          type: string
          format: uuid
          nullable: true
        distribution:
          type: object
          additionalProperties:
            type: integer
          example:
            box1: 20
            box2: 30
            box3: 25
            box4: 15
            box5: 10
            box6: 5
            box7: 5
        totalCards:
          type: integer
